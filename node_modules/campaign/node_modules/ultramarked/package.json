{
  "name": "ultramarked",
  "description": "Marked with built-in syntax highlighting and input sanitizing that doesn't encode all HTML",
  "homepage": "https://github.com/bevacqua/ultramarked",
  "author": {
    "name": "Nicolas Bevacqua",
    "email": "nicolasbevacqua@gmail.com",
    "url": "http://www.ponyfoo.com"
  },
  "version": "1.7.0",
  "repository": {
    "type": "git",
    "url": "git://github.com/bevacqua/ultramarked.git"
  },
  "bugs": {
    "url": "https://github.com/bevacqua/ultramarked/issues"
  },
  "dependencies": {
    "chalk": "^0.4.0",
    "he": "^0.4.1",
    "highlight-redux": "^1.0.1",
    "highlight.js": "^8.0.0",
    "marked": "^0.3.2",
    "underscore.string": "^2.3.3",
    "wordwrap": "0.0.2"
  },
  "main": "./src/node.js",
  "browser": {
    "./src/node.js": "./src/browser.js",
    "highlight.js": "highlight-redux",
    "he": "./lib/he-lite.js"
  },
  "readme": "# ultramarked\n\n[**Marked**](https://github.com/chjj/marked) with built-in syntax highlighting and input sanitizing that doesn't encode all HTML.\n\n**Ultramarked** wraps around marked, so it's essentially Marked, with a few extra options.\n\n## Fetch\n\n    $ npm install ultramarked --save\n\n## Use\n\n    var ultramarked = require('ultramarked');\n\n    ultramarked.setOptions({\n        // your options go here\n    });\n\n    ultramarked('This is **awesome**!');\n\n## Configure\n\n### options.ultralight\n\nSyntax highlighting powered by [highlight.js](https://github.com/isagalaev/highlight.js), no extra magic. Classes are prefixed `hljs` for convenience. Note that the `renderer` you choose will be overridden.\n\n### options.ultrasanitize\n\nAs of right now, Marked encodes **all** HTML input when `sanitize = true`. Set this option to true to use the [AngularJS Sanitizer][2] sanitizer, tweaked to disallow script and style tags.\n\n### options.iframes\n\nIf you are using `ultrasanitize`, you can pass in an array of strings or regular expressions that match permitted `iframe` targets. Regular expressions are tested against user input, and strings are interpreted as the beginning of a URL. This means that an string like `'http://google.com'` will match any URL in the `google.com` domain that uses the `HTTP` protocol.\n\n### options.terminal\n\nPrettifies the code for terminal output! Incompatible with `ultralight`, which will be disabled when `terminal` is enabled. Also turns off `ultrasanitize`, because color codes. Luckily none of that will be an issue when rendering HTML for the terminal!\n\n![terminal.png][1]\n\n### options.sanitizer\n\nAngular's sanitizer option might be too lenient for you. If that's the case, you can use PageDown's white-list instead, which is much more narrow, and doesn't allow setting class attributes, for example.\n\n```js\nultramarked.setOptions({\n\tsanitizer: require('pagedown-sanitizer')\n});\n```\n\n[1]: http://i.imgur.com/fTh1JiD.png\n[2]: https://github.com/angular/angular.js/blob/master/lib/htmlparser/htmlparser.js\n",
  "readmeFilename": "README.md",
  "_id": "ultramarked@1.7.0",
  "_from": "ultramarked@^1.6.0"
}
