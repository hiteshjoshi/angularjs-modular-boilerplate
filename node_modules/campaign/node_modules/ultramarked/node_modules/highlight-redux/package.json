{
  "name": "highlight-redux",
  "version": "1.0.1",
  "description": "A redux of highlight.js for the Browserify human",
  "main": "lib/index.js",
  "repository": {
    "type": "git",
    "url": "https://github.com/bevacqua/highlight-redux.git"
  },
  "author": {
    "name": "Nicolas Bevacqua",
    "email": "nicolasbevacqua@gmail.com",
    "url": "http://bevacqua.io/"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/bevacqua/highlight-redux/issues"
  },
  "homepage": "https://github.com/bevacqua/highlight-redux",
  "readme": "# Highlight.js\n\nHighlight.js highlights syntax in code examples on blogs, forums and,\nin fact, on any web page. It's very easy to use because it works\nautomatically: finds blocks of code, detects a language, highlights it.\n\nAutodetection can be fine tuned when it fails by itself (see \"Heuristics\").\n\n\n## Basic usage\n\nLink the library and a stylesheet from your page and hook highlighting to\nthe page load event:\n\n```html\n<link rel=\"stylesheet\" href=\"styles/default.css\">\n<script src=\"highlight.pack.js\"></script>\n<script>hljs.initHighlightingOnLoad();</script>\n```\n\nThis will highlight all code on the page marked up as `<pre><code> .. </code></pre>`.\nIf you use different markup or need to apply highlighting dynamically, read\n\"Custom initialization\" below.\n\n- You can download your own customized version of \"highlight.pack.js\" or\n  use the hosted one as described on the download page:\n  <http://highlightjs.org/download/>\n\n- Style themes are available in the download package or as hosted files.\n  To create a custom style for your site see the class reference in the file\n  [CSS classes reference][cr] from the downloaded package.\n\n[cr]: http://highlightjs.readthedocs.org/en/latest/css-classes-reference.html\n\n\n## node.js\n\nHighlight.js can be used under node.js. The package with all supported languages is\ninstallable from NPM:\n\n    npm install highlight.js\n\nAlternatively, you can build it from the source with only languages you need:\n\n    python3 tools/build.py -tnode lang1 lang2 ..\n\nUsing the library:\n\n```javascript\nvar hljs = require('highlight.js');\n\n// If you know the language\nhljs.highlight(lang, code).value;\n\n// Automatic language detection\nhljs.highlightAuto(code).value;\n```\n\n\n## AMD\n\nHighlight.js can be used with an AMD loader.  You will need to build it from\nsource in order to do so:\n\n```bash\n$ python3 tools/build.py -tamd lang1 lang2 ..\n```\n\nWhich will generate a `build/highlight.pack.js` which will load as an AMD\nmodule with support for the built languages and can be used like so:\n\n```javascript\nrequire([\"highlight.js/build/highlight.pack\"], function(hljs){\n\n  // If you know the language\n  hljs.highlight(lang, code).value;\n\n  // Automatic language detection\n  hljs.highlightAuto(code).value;\n});\n```\n\n\n## Tab replacement\n\nYou can replace TAB ('\\x09') characters used for indentation in your code\nwith some fixed number of spaces or with a `<span>` to give them special\nstyling:\n\n```html\n<script type=\"text/javascript\">\n  hljs.configure({tabReplace: '    '}); // 4 spaces\n  // ... or\n  hljs.configure({tabReplace: '<span class=\"indent\">\\t</span>'});\n\n  hljs.initHighlightingOnLoad();\n</script>\n```\n\n## Custom initialization\n\nIf you use different markup for code blocks you can initialize them manually\nwith `highlightBlock(code)` function. It takes a DOM element containing the\ncode to highlight and optionally a string with which to replace TAB\ncharacters.\n\nInitialization using, for example, jQuery might look like this:\n\n```javascript\n$(document).ready(function() {\n  $('pre code').each(function(i, e) {hljs.highlightBlock(e)});\n});\n```\n\nYou can use `highlightBlock` to highlight blocks dynamically inserted into\nthe page. Just make sure you don't do it twice for already highlighted\nblocks.\n\nIf your code container relies on `<br>` tags instead of line breaks (i.e. if\nit's not `<pre>`) set the `useBR` option to `true`:\n\n```javascript\nhljs.configure({useBR: true});\n$('div.code').each(function(i, e) {hljs.highlightBlock(e)});\n```\n\n\n## Heuristics\n\nAutodetection of a code's language is done using a simple heuristic:\nthe program tries to highlight a fragment with all available languages and\ncounts all syntactic structures that it finds along the way. The language\nwith greatest count wins.\n\nThis means that in short fragments the probability of an error is high\n(and it really happens sometimes). In this cases you can set the fragment's\nlanguage explicitly by assigning a class to the `<code>` element:\n\n```html\n<pre><code class=\"html\">...</code></pre>\n```\n\nYou can use class names recommended in HTML5: \"language-html\",\n\"language-php\". Classes also can be assigned to the `<pre>` element.\n\nTo disable highlighting of a fragment altogether use \"no-highlight\" class:\n\n```html\n<pre><code class=\"no-highlight\">...</code></pre>\n```\n\n\n## Export\n\nFile export.html contains a little program that allows you to paste in a code\nsnippet and then copy and paste the resulting HTML code generated by the\nhighlighter. This is useful in situations when you can't use the script itself\non a site.\n\n\n## Meta\n\n- Version: 8.0\n- URL:     http://highlightjs.org/\n\nFor the license terms see LICENSE files.\nFor authors and contributors see AUTHORS.en.txt file.\n",
  "readmeFilename": "README.md",
  "_id": "highlight-redux@1.0.1",
  "_from": "highlight-redux@^1.0.1"
}
